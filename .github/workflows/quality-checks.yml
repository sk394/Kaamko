name: Quality Checks

on:
  push:
    branches: [ main, develop, 'feature/*', 'bugfix/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: |
        npm run lint -- --format=@microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
      continue-on-error: true
      
    - name: Upload ESLint results to GitHub
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: eslint-results.sarif
        wait-for-processing: true
        
    - name: Run Prettier check
      run: npm run format:check
      
    - name: Run TypeScript check
      run: npx tsc --noEmit --pretty
      
    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter
      
    - name: Run performance tests
      run: npm run test:performance || echo "No performance tests configured"
      continue-on-error: true
      
    - name: Check bundle size
      run: |
        npx expo export --dump-assetmap
        echo "Bundle analysis completed"
      continue-on-error: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
          eslint-results.sarif

  # Dependency vulnerability check
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          trivy-results.sarif
          npm-audit.json

  # Code quality metrics
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarCloud
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false
      
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
      
    - name: CodeClimate Test Reporter
      uses: paambaati/codeclimate-action@v5.0.0
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      with:
        coverageLocations: ${{github.workspace}}/coverage/lcov.info:lcov
      continue-on-error: true

  # Check if app builds without errors
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Expo CLI
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        token: ${{ secrets.EXPO_TOKEN }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check Expo configuration
      run: npx expo config --type prebuild
      
    - name: Export web build
      run: npx expo export:web
      
    - name: Check bundle size
      run: |
        if [ -d "web-build" ]; then
          echo "Web build size:"
          du -sh web-build/
          echo ""
          echo "Largest files:"
          find web-build -type f -name "*.js" -exec ls -lh {} + | sort -k5 -hr | head -10
        fi

  # Generate build report
  build-report:
    name: Generate Build Report
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan, code-quality, build-check]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate build report
      run: |
        echo "# Kaamko App - Build Report" > build-report.md
        echo "" >> build-report.md
        echo "## Build Status" >> build-report.md
        echo "- **Quality Checks**: ${{ needs.quality-checks.result }}" >> build-report.md
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> build-report.md
        echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> build-report.md
        echo "- **Build Check**: ${{ needs.build-check.result }}" >> build-report.md
        echo "" >> build-report.md
        echo "## Commit Information" >> build-report.md
        echo "- **SHA**: ${{ github.sha }}" >> build-report.md
        echo "- **Author**: ${{ github.actor }}" >> build-report.md
        echo "- **Branch**: ${{ github.ref_name }}" >> build-report.md
        
    - name: Upload build report
      uses: actions/upload-artifact@v3
      with:
        name: build-report
        path: build-report.md